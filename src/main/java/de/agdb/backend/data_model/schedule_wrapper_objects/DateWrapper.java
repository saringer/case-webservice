package de.agdb.backend.data_model.schedule_wrapper_objects;

import javax.persistence.*;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;


@Entity
@Table(name = "day")
public class DateWrapper {


    // An autogenerated id (unique for each schedule in the db)
    @Id
    @Column(name = "DAY_ID")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private ZonedDateTime day;
    private boolean eventActive = false;


    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, targetEntity = TimeLocationWrapper.class)
    @JoinTable(name = "DAY_TIMELOCATION", joinColumns = { @JoinColumn(name = "DAY_ID") }, inverseJoinColumns = { @JoinColumn(name = "TIMELOCATION_ID") })
    private List<TimeLocationWrapper> timeAndLocationList;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public DateWrapper() {

    }


    public DateWrapper(ZonedDateTime day) {
        this.day = day;
        this.timeAndLocationList = new ArrayList<>();
    }

    public void addTimeLocation(TimeLocationWrapper e) {
            timeAndLocationList.add(e);
    }
    public void removeTimeLocation(TimeLocationWrapper e) {
        timeAndLocationList.remove(e);
    }

    public ZonedDateTime getDay() {
        return this.day;
    }
    public void setDay(ZonedDateTime day) {
        this.day = day;
    }

    public List<TimeLocationWrapper> getTimeAndLocationList() {
        return  this.timeAndLocationList;
    }
    public void setTimeAndLocationList(List<TimeLocationWrapper> timeAndLocationList) {
        this.timeAndLocationList = timeAndLocationList;
    }

    public boolean isEventActive() {
        return eventActive;
    }

    public void setEventActive(boolean eventActive) {
        this.eventActive = eventActive;
    }



}
