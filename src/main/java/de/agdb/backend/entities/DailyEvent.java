package de.agdb.backend.entities;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "dailyevent")
public class DailyEvent {



    // An autogenerated id (unique for each event in the db)
    @Id
    @Column(name = "DAILYEVENT_ID", updatable=false, nullable=false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    private long dateWrapperId;

    @ElementCollection(fetch = FetchType.EAGER)
    @Fetch(value = FetchMode.SUBSELECT)
    private List<Long> timeLocationIdList = new ArrayList<Long>();

    @ElementCollection(fetch = FetchType.EAGER)
    @Fetch(value = FetchMode.SUBSELECT)

    private List<Long> categoriesWrapperIdList = new ArrayList<Long>();

    private boolean hasBeenReadOnce = false;


    public DailyEvent() {

    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public long getDateWrapperId() {
        return dateWrapperId;
    }

    public void setDateWrapperId(long dateWrapperId) {
        this.dateWrapperId = dateWrapperId;
    }

    public List<Long> getTimeLocationList() {
        return timeLocationIdList;
    }

    public void addTimeLocationId(Long id) {
        this.timeLocationIdList.add(id);
    }

    public List<Long> getCategoriesWrapperList() {
        return categoriesWrapperIdList;
    }
    public void addCategoriesWrapperId (Long id) {
        this.categoriesWrapperIdList.add(id);
    }


    public boolean isHasBeenReadOnce() {
        return hasBeenReadOnce;
    }

    public void setHasBeenReadOnce(boolean hasBeenReadOnce) {
        this.hasBeenReadOnce = hasBeenReadOnce;
    }

    public void removeTimeLocationID(Long id) {
        for (int i = 0; i< timeLocationIdList.size(); i++) {
            if (timeLocationIdList.get(i).equals(id)) {
                timeLocationIdList.remove(i);
                break;
            }
        }
    }

    public void removeCategoryID(Long id) {
        for (int i=0;i<categoriesWrapperIdList.size();i++) {
            if (categoriesWrapperIdList.get(i).equals(id)) {
                categoriesWrapperIdList.remove(i);
                break;
            }
        }
    }




}
